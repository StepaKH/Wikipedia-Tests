import pytest
import allure

@pytest.fixture(scope="function")
def open_language_edit_screen(pages, logger):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤"""
    onboarding = pages.onboarding.buttons
    lang_page = pages.language

    with allure.step("üõ† Setup: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤"):
        logger.debug("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤ ('Add or edit languages')")
        assert onboarding.clicks.safe_click(onboarding.ADD_LANGUAGE_BTN), \
            "‚ùå –ö–Ω–æ–ø–∫–∞ 'Add or edit languages' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        logger.info("‚úÖ –≠–∫—Ä–∞–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç")

    return lang_page

@pytest.fixture(scope="function")
def open_log_in_screen(pages, logger):
    with allure.step("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"):
        try:
            onboarding = pages.onboarding.buttons
            for i in range(3):
                if onboarding.clicks.safe_click(onboarding.CONTINUE_BTN):
                    logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–∫—Ä–∞–Ω {i + 1}")

            if onboarding.clicks.safe_click(onboarding.GET_STARTED_BTN):
                logger.debug("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ 'Get Started'")

        except Exception as e:
            logger.warning(f"–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –Ω–µ –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫–∞–∑–∞–Ω –∏–ª–∏ —É–∂–µ –ø—Ä–æ–ø—É—â–µ–Ω: {str(e)}")

    with allure.step('–ü–µ—Ä–µ—Ö–æ–¥ –≤–æ –≤–∫–ª–∞–¥–∫—É "Log in / join Wikipedia"'):
        try:
            logging = pages.logging

            logger.debug('–ü–µ—Ä–µ—Ö–æ–¥ –≤–æ –≤–≤–∫–ª–∞–¥–∫—É "–ú–µ–Ω—é"')
            assert logging.clicks.safe_click(logging.MENU_BUTTOM), "‚ùå –ö–Ω–æ–ø–∫–∞ '–ú–µ–Ω—é' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

            logger.debug('–ü–µ—Ä–µ—Ö–æ–¥ –≤–æ –≤–∫–ª–∞–¥–∫—É "Log in / join Wikipedia"')
            assert logging.clicks.safe_click(logging.MAIN_LOGIN_BUTTOM)
            logger.info('‚úÖ –≠–∫—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç')

        except Exception as e:
            logger.warning(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤–æ –≤–∫–ª–∞–¥–∫—É –Ω–µ –±—ã–ª —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω: {str(e)}")

    return pages.logging