import pytest
import allure
from paths import open_language_edit_screen

@pytest.mark.language
@pytest.mark.smoke
@allure.description("–¢–µ—Å—Ç: —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞")
def test_random_add_language(open_language_edit_screen, logger):
    """–¢–µ—Å—Ç –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    try:
        lang_actions = open_language_edit_screen
        logger.info("=== –¢–µ—Å—Ç: —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ ===")

        with allure.step("1. –û—Ç–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞"):
            logger.debug("–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ 'Add languages'")
            assert lang_actions.clicks.safe_click(lang_actions.ADD_LANGUAGE_TITLE)
            logger.info("–ö–Ω–æ–ø–∫–∞ 'Add languages' –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞")

        with allure.step("2. –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"):
            logger.debug("–í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞")
            added_language = lang_actions.choose_random_language()
            assert added_language is not None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞"
            logger.info(f"–°–ª—É—á–∞–π–Ω—ã–π —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω: {added_language}")

        with allure.step("3. –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —è–∑—ã–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ"):
            logger.debug(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —è–∑—ã–∫–∞ '{added_language}' –≤ —Å–ø–∏—Å–∫–µ")
            assert lang_actions.clicks.is_visible(lang_actions.language_by_name(added_language)), \
                f"–Ø–∑—ã–∫ '{added_language}' –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ"
            logger.info(f"–Ø–∑—ã–∫ '{added_language}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ")

        logger.info("=== –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è ===")

    except Exception as e:
        logger.error(f"!!! –¢–µ—Å—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {str(e)}")
        allure.attach(
            name="–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞",
            body=str(e),
            attachment_type=allure.attachment_type.TEXT
        )
        raise

@pytest.mark.language
@pytest.mark.smoke
@allure.description("–¢–µ—Å—Ç: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")
def test_add_language(open_language_edit_screen, logger, language_to_add=None):
    """
    –¢–µ—Å—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
    """
    try:
        lang_actions = open_language_edit_screen

        with allure.step("–û—Ç–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞"):
            logger.debug("–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ 'Add languages'")
            assert lang_actions.clicks.safe_click(lang_actions.ADD_LANGUAGE_TITLE)
            logger.info("–ö–Ω–æ–ø–∫–∞ 'Add languages' –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞")

        if language_to_add is None:
            with allure.step("–í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞"):
                logger.debug("–í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞")
                language_to_add = lang_actions.choose_random_language(max_scrolls=3, click_fact=None)
                assert language_to_add is not None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞"
                logger.info(f"–°–ª—É—á–∞–π–Ω—ã–π —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞: {language_to_add}")

        with allure.step("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫"):
            logger.debug(f"–ò—â–µ–º —è–∑—ã–∫ '{language_to_add}' —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")
            added = lang_actions.add_language_via_search(language_to_add)
            assert added, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —è–∑—ã–∫ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫"
            logger.info(f"–Ø–∑—ã–∫ '{language_to_add}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫")

        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —è–∑—ã–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ"):
            logger.debug(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —è–∑—ã–∫–∞ '{language_to_add}' –≤ —Å–ø–∏—Å–∫–µ")
            assert lang_actions.clicks.is_visible(lang_actions.language_by_name(language_to_add)), \
                f"–Ø–∑—ã–∫ '{language_to_add}' –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ"
            logger.info(f"–Ø–∑—ã–∫ '{language_to_add}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ")

        logger.info("=== –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω: —è–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è ===")

    except Exception as e:
        logger.error(f"!!! –¢–µ—Å—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {str(e)}")
        allure.attach(
            name="–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞",
            body=str(e),
            attachment_type=allure.attachment_type.TEXT
        )
        raise

@pytest.mark.language
@pytest.mark.smoke
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —è–∑—ã–∫–∞ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é drag-and-drop.")
def test_drag_language_to_bottom(open_language_edit_screen, logger, new_language=None):
    """–¢–µ—Å—Ç –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —è–∑—ã–∫–∞ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞"""
    try:
        lang_page = open_language_edit_screen
        logger.info("=== –¢–µ—Å—Ç: –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —è–∑—ã–∫–∞ –≤–Ω–∏–∑ —Å–ø–∏—Å–∫–∞ ===")

        if not new_language:
            assert lang_page.clicks.safe_click(lang_page.ADD_LANGUAGE_TITLE)
            lang_page.add_language_via_search('–†—É—Å—Å–∫–∏–π')

        with allure.step("–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤"):
            logger.debug("–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤")
            languages = lang_page.get_language_names()
            assert languages, "‚ùå –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –ø—É—Å—Ç"

            logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∑—ã–∫–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è")
            assert len(languages) >= 3, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è–∑—ã–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è'

            logger.info(f"–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤: {languages[:-1]}")

        with allure.step("–ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–µ—Ä–≤—ã–π —è–∑—ã–∫ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞"):
            language_to_move = languages[0]
            logger.debug(f"–ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —è–∑—ã–∫ '{language_to_move}' –≤–Ω–∏–∑ —Å–ø–∏—Å–∫–∞")
            result = lang_page.move_language_to_bottom(language_to_move, new_language=new_language)
            assert result, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —è–∑—ã–∫ '{language_to_move}' –≤–Ω–∏–∑"
            logger.info(f"‚úÖ –Ø–∑—ã–∫ '{language_to_move}' —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤–Ω–∏–∑")

        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —è–∑—ã–∫ –æ–∫–∞–∑–∞–ª—Å—è –≤–Ω–∏–∑—É"):
            updated_languages = lang_page.get_language_names()
            assert updated_languages[-2] == language_to_move, \
                f"‚ùå –Ø–∑—ã–∫ '{language_to_move}' –Ω–µ –æ–∫–∞–∑–∞–ª—Å—è –≤–Ω–∏–∑—É (–æ–∂–∏–¥–∞–ª—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏)"
            logger.info(f"üéØ –Ø–∑—ã–∫ '{language_to_move}' —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–∏–∑—É —Å–ø–∏—Å–∫–∞: {updated_languages[:-1]}")

        logger.info("=== –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω: —è–∑—ã–∫ –ø–µ—Ä–µ–º–µ—â—ë–Ω ===")

    except Exception as e:
        logger.error(f"!!! –¢–µ—Å—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {str(e)}")
        allure.attach(
            name="–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞",
            body=str(e),
            attachment_type=allure.attachment_type.TEXT
        )
        raise

@pytest.mark.language
@pytest.mark.smoke
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —è–∑—ã–∫–∞ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é drag-and-drop –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞ –≤ —Å–ø–∏—Å–æ–∫.")
def test_drag_language_after_add(open_language_edit_screen, logger):
    try:
        logger.info("=== –¢–µ—Å—Ç: –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —è–∑—ã–∫–∞ –≤–Ω–∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ===")

        test_random_add_language(open_language_edit_screen, logger)

        test_drag_language_to_bottom(open_language_edit_screen, logger, new_language=True)

    except Exception as e:
        logger.error(f"!!! –¢–µ—Å—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {str(e)}")
        allure.attach(
            name="–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞",
            body=str(e),
            attachment_type=allure.attachment_type.TEXT
        )
        raise

@pytest.mark.language
@pytest.mark.smoke
@allure.description("–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞.")
def test_re_adding_language_search_bar(open_language_edit_screen, logger):
    try:
        lang_actions = open_language_edit_screen
        logger.info("=== –¢–µ—Å—Ç: –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ —Å—Ç—Ä–æ–∫—É –ø–æ–∏—Å–∫–∞===")

        with allure.step("–í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞"):
            logger.debug("–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ 'Add languages'")
            assert lang_actions.clicks.safe_click(lang_actions.ADD_LANGUAGE_TITLE)
            logger.info("–ö–Ω–æ–ø–∫–∞ 'Add languages' –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞")

            logger.debug("–í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞")
            language_to_add = lang_actions.choose_random_language(max_scrolls=3, click_fact=None)
            assert language_to_add is not None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞"
            logger.info(f"–°–ª—É—á–∞–π–Ω—ã–π —è–∑—ã–∫ –≤—ã–±—Ä–∞–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞: {language_to_add}")

        lang_actions.clicks.safe_click(lang_actions.BACK_BTN)
        test_add_language(open_language_edit_screen, logger, language_to_add)
        test_add_language(open_language_edit_screen, logger, language_to_add)

    except Exception as e:
        logger.error(f"!!! –¢–µ—Å—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {str(e)}")
        allure.attach(
            name="–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞",
            body=str(e),
            attachment_type=allure.attachment_type.TEXT
        )
        raise

@pytest.mark.language
@pytest.mark.smoke
@allure.description("–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ")
def test_delete_random_language_by_long_press(open_language_edit_screen, logger):
    try:
        lang_page = open_language_edit_screen
        logger.info("=== –¢–µ—Å—Ç: —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ===")

        assert lang_page.clicks.safe_click(lang_page.ADD_LANGUAGE_TITLE)
        lang_page.add_language_via_search('–†—É—Å—Å–∫–∏–π')

        with allure.step("–£–¥–∞–ª—è–µ–º —è–∑—ã–∫ —á–µ—Ä–µ–∑ long press"):
            deleted = lang_page.remove_random_language_by_long_press()
            assert deleted, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —è–∑—ã–∫ —á–µ—Ä–µ–∑ –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ"

        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —è–∑—ã–∫ —É–¥–∞–ª—ë–Ω"):
            updated_languages = lang_page.get_language_names()
            assert deleted not in updated_languages, \
                f"‚ùå –Ø–∑—ã–∫ '{deleted}' –≤—Å—ë –µ—â—ë –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è"
            logger.info(f"‚úÖ –Ø–∑—ã–∫ '{deleted}' –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ")

    except Exception as e:
        logger.error(f"!!! –û—à–∏–±–∫–∞: {e}")
        allure.attach(name="–û—à–∏–±–∫–∞", body=str(e), attachment_type=allure.attachment_type.TEXT)
        raise

@pytest.mark.language
@pytest.mark.smoke
@allure.description("–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é")
def test_delete_random_language_via_menu(open_language_edit_screen, logger):
    try:
        lang_page = open_language_edit_screen
        logger.info("=== –¢–µ—Å—Ç: —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é ===")

        assert lang_page.clicks.safe_click(lang_page.ADD_LANGUAGE_TITLE)
        lang_page.add_language_via_search('–†—É—Å—Å–∫–∏–π')

        with allure.step("–£–¥–∞–ª—è–µ–º —è–∑—ã–∫ —á–µ—Ä–µ–∑ –º–µ–Ω—é"):
            deleted = lang_page.remove_random_language_via_menu()
            assert deleted, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —è–∑—ã–∫ —á–µ—Ä–µ–∑ –º–µ–Ω—é"

        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —è–∑—ã–∫ —É–¥–∞–ª—ë–Ω"):
            updated_languages = lang_page.get_language_names()
            assert deleted not in updated_languages, \
                f"‚ùå –Ø–∑—ã–∫ '{deleted}' –≤—Å—ë –µ—â—ë –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è"
            logger.info(f"‚úÖ –Ø–∑—ã–∫ '{deleted}' –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ")

    except Exception as e:
        logger.error(f"!!! –û—à–∏–±–∫–∞: {e}")
        allure.attach(name="–û—à–∏–±–∫–∞", body=str(e), attachment_type=allure.attachment_type.TEXT)
        raise