import logging
import os
import platform
import signal
import subprocess
from typing import Generator

import allure
import pytest
import requests
from appium.webdriver.appium_service import AppiumService
from appium.webdriver.webdriver import WebDriver as Remote
from requests.adapters import HTTPAdapter
from urllib3 import Retry

from config.settings import Config
from drivers.appium_driver import create_driver
from pages.functional_tests_page.all_pages import AllPages
from utils.logger_utils import setup_logger, setup_logger_device, setup_service_logger

ADB_TAG = "wikipedia.alpha"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—É—Ç–µ–π
_PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
_ALLURE_DIR = os.path.join(_PROJECT_ROOT, "allure")

@pytest.fixture(scope="session", autouse=True)
def appium_service(request):
    worker_id = getattr(request.config, "workerinput", {}).get("workerid", "master")
    device_config = Config.get_device_config(worker_id)
    port = device_config["appiumPort"]

    """–ó–∞–ø—É—Å–∫ Appium —Å–µ—Ä–≤–µ—Ä–∞"""
    # –°–æ–∑–¥–∞—ë–º –ª–æ–≥–≥–µ—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–ª—è Appium
    logs_root_dir = os.path.join(_PROJECT_ROOT, "logs", "session")
    os.makedirs(logs_root_dir, exist_ok=True)
    log_file = os.path.join(logs_root_dir, f"appium_service_{port}.log")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger(f"appium_service_{worker_id}")
    logger.setLevel(logging.DEBUG)
    if logger.hasHandlers():
        logger.handlers.clear()

    file_handler = logging.FileHandler(log_file, mode='w', encoding='utf-8')
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)

    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Appium —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")

    service = AppiumService()
    service.start(
        args=[
            '--port', str(port),
            '--log-level', 'error',
            '--allow-insecure', 'parallel_sessions',
            '--relaxed-security'
        ],
        timeout_ms=20000
    )

    if not (service.is_running and service.is_listening):
        logger.error("‚ùå Appium —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
        raise RuntimeError("Appium —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")

    logger.info("‚úÖ Appium —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

    yield

    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Appium —Å–µ—Ä–≤–µ—Ä–∞...")
    service.stop()
    logger.info("‚úÖ Appium —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def _get_worker_logger(worker_id: str, name: str, clear: bool = True) -> logging.Logger:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞"""
    LOGS_DIR = os.path.join(_PROJECT_ROOT, "logs", "driver")
    os.makedirs(LOGS_DIR, exist_ok=True)

    logger = logging.getLogger(f"{name}_{worker_id}")
    logger.setLevel(logging.DEBUG)

    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    for handler in logger.handlers[:]:
        handler.close()
        logger.removeHandler(handler)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    # –û—á–∏—Å—Ç–∫–∞ –∏–ª–∏ –¥–æ–∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
    log_file = os.path.join(LOGS_DIR, f"{name}_{worker_id}.log")
    file_mode = 'w' if clear else 'a'

    handler = logging.FileHandler(log_file, mode=file_mode, encoding='utf-8')
    handler.setFormatter(logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    ))
    logger.addHandler(handler)

    return logger

def _wait_for_appium_ready(port: int, timeout: float = 5.0, interval: float = 1.0) -> bool:
    url = f"http://localhost:{port}/status"
    session = requests.Session()
    adapter = HTTPAdapter(
        max_retries=Retry(
            total=int(timeout / interval),
            backoff_factor=interval,
            status_forcelist=[500, 502, 503, 504]
        )
    )
    session.mount("http://", adapter)

    try:
        response = session.get(url, timeout=interval)
        return response.status_code == 200
    except requests.exceptions.RequestException:
        return False

@pytest.fixture(scope="function")
def driver(request) -> Generator[Remote, None, None]:
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    worker_id = getattr(request.config, "workerinput", {}).get("workerid", "master")
    logger = _get_worker_logger(worker_id, "driver")
    port = Config.get_device_config(worker_id)["appiumPort"]

    # –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Appium —Å–µ—Ä–≤–µ—Ä–∞
    logger.debug("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Appium —Å–µ—Ä–≤–µ—Ä–∞...")
    if not _wait_for_appium_ready(port):
        logger.error("‚ùå Appium —Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        pytest.fail("Appium —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")

    driver_instance = None
    try:
        logger.debug("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞...")
        driver_instance = create_driver(worker_id)
        logger.info("‚úÖ –î—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        yield driver_instance
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {str(e)}")
        pytest.fail(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä: {str(e)}")
    finally:
        if driver_instance:
            try:
                logger.debug("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –¥—Ä–∞–π–≤–µ—Ä–∞...")
                driver_instance.quit()
                logger.info("‚úÖ –î—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {str(e)}")

def pytest_sessionstart(session):
    """–û—á–∏—â–∞–µ—Ç –ª–æ–≥-—Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ —Å–µ—Å—Å–∏–∏"""
    LOGS_DIR = os.path.join(_PROJECT_ROOT, "logs", "driver")
    os.makedirs(LOGS_DIR, exist_ok=True)

    for filename in os.listdir(LOGS_DIR):
        file_path = os.path.join(LOGS_DIR, filename)
        if filename.endswith(".log"):
            with open(file_path, "w", encoding="utf-8"):
                pass  # –æ—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª

@pytest.hookimpl(tryfirst=True)
def pytest_runtest_setup(item):
    """–•—É–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞"""
    worker_id = getattr(item.config, "workerinput", {}).get("workerid", "master")
    logger = _get_worker_logger(worker_id, "test_setup", clear=False)
    logger.debug(f"üîß –¢–µ—Å—Ç '{item.nodeid}' –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –≤–æ—Ä–∫–µ—Ä–µ {worker_id}")

@pytest.fixture(scope="function")
def pages(driver, logger):
    return AllPages(driver, logger)

@pytest.fixture(scope="function")
def logger(request):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é —Ñ–∞–π–ª–æ–≤"""
    test_name = request.node.name
    test_file_path = request.fspath

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ pytest
    project_root = str(request.config.rootdir)

    # –ü—É—Ç—å –∫ –æ–±—â–µ–π –ø–∞–ø–∫–µ logs –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    logs_root_dir = os.path.join(project_root, "logs")
    os.makedirs(logs_root_dir, exist_ok=True)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –ª–µ–∂–∏—Ç —Ç–µ—Å—Ç
    test_module_dir = os.path.basename(os.path.dirname(test_file_path))

    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤: <–∫–æ—Ä–µ–Ω—å>/logs/<module>_logs
    log_dir_name = f"{test_module_dir}_logs"
    log_dir_path = os.path.join(project_root, "logs", log_dir_name)
    os.makedirs(log_dir_path, exist_ok=True)

    logger = setup_logger(test_name, log_dir_path)
    logger.info(f"üöÄ Starting test: {test_name}")

    yield logger

    logger.info(f"‚úÖ Test finished: {test_name}")

@pytest.fixture(scope="function")
def service_logger(request):
    """–õ–æ–≥–≥–µ—Ä –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è ‚Äî –¥–ª—è —Ñ–∏–∫—Å—Ç—É—Ä –≤—Ä–æ–¥–µ device_logs –∏ appium_service"""
    test_name = request.node.name
    test_file_path = request.fspath
    project_root = str(request.config.rootdir)

    test_module_dir = os.path.basename(os.path.dirname(test_file_path))
    log_dir_path = os.path.join(project_root, "logs", f"{test_module_dir}_logs")
    os.makedirs(log_dir_path, exist_ok=True)

    return setup_service_logger(test_name, log_dir_path)

@pytest.fixture(scope="function", autouse=True)
def device_logs(request, service_logger):
    test_name = request.node.name
    test_file_path = request.fspath
    project_root = str(request.config.rootdir)

    # –ü–æ–ª—É—á–∞–µ–º worker_id –∏ udid
    worker_id = getattr(request.config, "workerinput", {}).get("workerid", "master")
    device_config = Config.get_device_config(worker_id)
    udid = device_config["udid"]

    # –ü—É—Ç—å –∫ –ª–æ–≥–∞–º
    test_module_dir = os.path.basename(os.path.dirname(test_file_path))
    log_dir_path = os.path.join(project_root, "logs", f"{test_module_dir}_logs")
    os.makedirs(log_dir_path, exist_ok=True)

    log_file = setup_logger_device(test_name, log_dir_path)

    try:
        subprocess.run(['adb', '-s', udid, 'logcat', '-c'], check=True)
        subprocess.run(['adb', '-s', udid, 'logcat', '-G', '2M'], check=True)
        service_logger.info(f"‚úÖ logcat –æ—á–∏—â–µ–Ω –∏ –±—É—Ñ–µ—Ä —É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è {udid}")
    except subprocess.CalledProcessError as e:
        service_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ logcat –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±—É—Ñ–µ—Ä–∞: {e}")
        yield
        return
    except FileNotFoundError:
        service_logger.error("‚ùå adb –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
        yield
        return

    try:
        kwargs = {
            'stdout': open(log_file, 'w', encoding='utf-8'),
            'stderr': subprocess.STDOUT
        }
        if platform.system() != "Windows":
            kwargs['preexec_fn'] = os.setsid

        process = subprocess.Popen(['adb', '-s', udid, 'logcat', f'{ADB_TAG}:I', '*:S'], **kwargs)
        service_logger.info(f"üîç –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {udid} –Ω–∞—á–∞—Ç–æ: {log_file}")
    except Exception as e:
        service_logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å adb logcat: {e}")
        yield
        return

    yield

    try:
        if platform.system() == "Windows":
            subprocess.run(['taskkill', '/F', '/T', '/PID', str(process.pid)], check=True)
        else:
            os.killpg(os.getpgid(process.pid), signal.SIGTERM)
        process.wait()
        service_logger.info(f"‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {log_file}")
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                log_content = f.read()
                allure.attach(
                    name="–õ–æ–≥–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (logcat)",
                    body=log_content,
                    attachment_type=allure.attachment_type.TEXT
                )
        except Exception as e:
            service_logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ª–æ–≥–∏ –∫ Allure: {e}")

    except Exception as e:
        service_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ logcat –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")

@pytest.hookimpl(tryfirst=True, hookwrapper=True)
def pytest_runtest_makereport(item, call):
    outcome = yield
    rep = outcome.get_result()

    if rep.when == 'call' and rep.failed:
        try:
            driver = item.funcargs['driver']
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é allure
            screenshot_dir = _ALLURE_DIR
            os.makedirs(screenshot_dir, exist_ok=True)
            screenshot_path = os.path.join(screenshot_dir, f"{item.nodeid.replace('::', '_')}.png")
            driver.save_screenshot(screenshot_path)

            # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫ allure –æ—Ç—á–µ—Ç—É
            allure.attach(
                driver.get_screenshot_as_png(),
                name="screenshot_on_failure",
                attachment_type=allure.attachment_type.PNG
            )
        except Exception as e:
            item.funcargs['logger'].error(f"Failed to take screenshot: {str(e)}")

def pytest_configure(config):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Allure-–æ—Ç—á–µ—Ç–æ–≤"""
    config.option.allure_report_dir = _ALLURE_DIR

@pytest.fixture(scope="function")
def skip_onboarding(pages, logger):
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —ç–∫—Ä–∞–Ω—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è"""
    saved = pages.saved

    with allure.step("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"):
        try:
            for i in range(3):
                if saved.clicks.safe_click(saved.CONTINUE_BTN):
                    logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω —ç–∫—Ä–∞–Ω –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ {i + 1}")
                else:
                    break

            if saved.clicks.safe_click(saved.GET_STARTED_BTN):
                logger.info("–û–Ω–±–æ—Ä–¥–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω")
            else:
                logger.debug("–≠–∫—Ä–∞–Ω –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: {str(e)}")
            allure.attach(
                name="–û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞",
                body=str(e),
                attachment_type=allure.attachment_type.TEXT
            )

    return pages

@pytest.fixture(scope="function")
def log_in(logger, skip_onboarding):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
    saved = skip_onboarding.saved

    try:
        with allure.step(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
            with allure.step("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª 'Saved'"):
                saved.clicks.safe_click(saved.SAVED_BTN)

            with allure.step("–û—Ç–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"):
                saved.clicks.safe_click(saved.POSITIVE_BTN)
                saved.clicks.safe_click(saved.CREATE_ACCOUNT_LOGIN_BUTTON_BTN)

            with allure.step("–í–≤–æ–¥ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
                assert saved.log_in_to_account(), "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å"
                saved.clicks.safe_click(saved.LOGIN_BUTTON_BTN)

            with allure.step("–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ 'Dont allow'"):
                logger.debug("–ò—â–µ–º –∫–Ω–æ–ø–∫—É 'Dont allow'")
                assert saved.clicks.safe_click(saved.PERMISSION_DENY_BUTTON_BTN), "–ö–Ω–æ–ø–∫–∞ 'Dont allow' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                logger.info("–ö–Ω–æ–ø–∫–∞ 'Dont allow' –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞")

            logger.info("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            yield saved

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        allure.attach(
            name="–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            body=str(e),
            attachment_type=allure.attachment_type.TEXT
        )
        pytest.fail(f"–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω - –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥: {str(e)}")

@pytest.fixture(scope="function")
def log_out(request, logger, pages):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    def fin():
        saved = pages.saved

        try:
            with allure.step("üö™ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"):
                assert saved.clicks.safe_click(saved.MORE_BTN), "‚ùå –ù–µ—Ç –∫–Ω–æ–ø–∫–∏ 'More'"
                assert saved.clicks.safe_click(saved.SETTINGS_TV), "‚ùå –ù–µ—Ç –∫–Ω–æ–ø–∫–∏ 'Settings'"

                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ Log out
                MAX_SWIPE_ATTEMPTS = 10
                for _ in range(MAX_SWIPE_ATTEMPTS):
                    try:
                        if saved.clicks.is_visible(saved.LOGOUT_BUTTON_BTN):
                            break
                    except:
                        pass
                    saved.swipes.swipe_up()
                else:
                    raise AssertionError("‚ùå –ö–Ω–æ–ø–∫–∞ 'Log out' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏")

                assert saved.clicks.safe_click(saved.LOGOUT_BUTTON_BTN), "‚ùå –ù–µ—Ç –∫–Ω–æ–ø–∫–∏ 'Log out'"
                assert saved.clicks.safe_click(saved.BUTTON1_BTN), "‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 'Log out' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

                assert saved.clicks.is_visible(saved.SAVED_BTN), "‚ùå –ù–µ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"
                logger.info("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–ª–æ–≥–∏–Ω–µ–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {str(e)}")
            allure.attach(
                name="–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞",
                body=str(e),
                attachment_type=allure.attachment_type.TEXT
            )
            raise

    request.addfinalizer(fin)