import subprocess
import signal
import pytest
import allure
import platform
import os
import shutil
from appium.webdriver.appium_service import AppiumService
from drivers.appium_driver import create_driver
from pages.functional_tests_page.onboarding_pages.onboarding_page import OnboardingPage
from utils.logger_utils import setup_logger, setup_logger_device

ADB_TAG = "wikipedia.alpha"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—É—Ç–µ–π
_PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
_ALLURE_DIR = os.path.join(_PROJECT_ROOT, "allure")

@pytest.fixture(scope="session", autouse=True)
def appium_service():
    """–ó–∞–ø—É—Å–∫ Appium —Å–µ—Ä–≤–µ—Ä–∞"""
    service = AppiumService()
    print("üöÄ –ó–∞–ø—É—Å–∫ Appium —Å–µ—Ä–≤–µ—Ä–∞...")
    service.start(args=['--log-level', 'error'], timeout_ms=15000)

    if not (service.is_running and service.is_listening):
        raise RuntimeError("‚ùå Appium —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")

    yield
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Appium —Å–µ—Ä–≤–µ—Ä–∞...")
    service.stop()

@pytest.fixture(scope="function")
def driver():
    d = create_driver()
    yield d
    d.quit()

@pytest.fixture(scope="function")
def onboarding(driver):
    return OnboardingPage(driver)

@pytest.fixture(scope="function")
def logger(request):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é —Ñ–∞–π–ª–æ–≤"""
    test_name = request.node.name
    test_file_path = request.fspath

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ pytest
    project_root = str(request.config.rootdir)

    # –ü—É—Ç—å –∫ –æ–±—â–µ–π –ø–∞–ø–∫–µ logs –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    logs_root_dir = os.path.join(project_root, "logs")
    os.makedirs(logs_root_dir, exist_ok=True)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –ª–µ–∂–∏—Ç —Ç–µ—Å—Ç
    test_module_dir = os.path.basename(os.path.dirname(test_file_path))

    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤: <–∫–æ—Ä–µ–Ω—å>/logs/<module>_logs
    log_dir_name = f"{test_module_dir}_logs"
    log_dir_path = os.path.join(project_root, "logs", log_dir_name)
    os.makedirs(log_dir_path, exist_ok=True)

    logger = setup_logger(test_name, log_dir_path)
    logger.info(f"üöÄ Starting test: {test_name}")

    yield logger

    logger.info(f"‚úÖ Test finished: {test_name}")

@pytest.fixture(scope="function", autouse=True)
def device_logs(request):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ adb logcat –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º —Å –æ—á–∏—Å—Ç–∫–æ–π –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –±—É—Ñ–µ—Ä–∞"""
    test_name = request.node.name
    test_file_path = request.fspath
    project_root = str(request.config.rootdir)

    # –ü—É—Ç—å –∫ –ª–æ–≥–∞–º
    test_module_dir = os.path.basename(os.path.dirname(test_file_path))
    log_dir_path = os.path.join(project_root, "logs", f"{test_module_dir}_logs")
    os.makedirs(log_dir_path, exist_ok=True)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞
    log_file = setup_logger_device(test_name, log_dir_path)

    # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—É—Ñ–µ—Ä–∞
    try:
        subprocess.run(['adb', 'logcat', '-c'], check=True)
        subprocess.run(['adb', 'logcat', '-G', '2M'], check=True)
        print("‚úÖ logcat –æ—á–∏—â–µ–Ω –∏ –±—É—Ñ–µ—Ä —É–≤–µ–ª–∏—á–µ–Ω")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ logcat –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±—É—Ñ–µ—Ä–∞: {e}")
    except FileNotFoundError:
        print("‚ùå adb –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
        yield
        return

    # –ó–∞–ø—É—Å–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        kwargs = {
            'stdout': open(log_file, 'w', encoding='utf-8'),
            'stderr': subprocess.STDOUT
        }
        if platform.system() != "Windows":
            kwargs['preexec_fn'] = os.setsid

        process = subprocess.Popen(['adb', 'logcat', f'{ADB_TAG}:I', '*:S'], **kwargs)
        print(f"[{test_name}] üîç –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–≤–∞–π—Å–∞ –Ω–∞—á–∞—Ç–æ: {log_file}")
    except Exception as e:
        print(f"[{test_name}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å adb logcat: {e}")
        yield
        return

    yield  # –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
    try:
        if platform.system() == "Windows":
            subprocess.run(['taskkill', '/F', '/T', '/PID', str(process.pid)], check=True)
        else:
            os.killpg(os.getpgid(process.pid), signal.SIGTERM)
        process.wait()
        print(f"[{test_name}] ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {log_file}")
    except Exception as e:
        print(f"[{test_name}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ logcat –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")

@pytest.hookimpl(tryfirst=True, hookwrapper=True)
def pytest_runtest_makereport(item, call):
    outcome = yield
    rep = outcome.get_result()

    if rep.when == 'call' and rep.failed:
        try:
            driver = item.funcargs['driver']
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é allure
            screenshot_dir = _ALLURE_DIR
            os.makedirs(screenshot_dir, exist_ok=True)
            screenshot_path = os.path.join(screenshot_dir, f"{item.nodeid.replace('::', '_')}.png")
            driver.save_screenshot(screenshot_path)

            # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫ allure –æ—Ç—á–µ—Ç—É
            allure.attach(
                driver.get_screenshot_as_png(),
                name="screenshot_on_failure",
                attachment_type=allure.attachment_type.PNG
            )
        except Exception as e:
            item.funcargs['logger'].error(f"Failed to take screenshot: {str(e)}")

def pytest_configure(config):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Allure-–æ—Ç—á–µ—Ç–æ–≤"""
    config.option.allure_report_dir = _ALLURE_DIR