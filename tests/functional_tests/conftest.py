import subprocess
import signal
import pytest
import platform
import time
import socket
from drivers.appium_driver import create_driver
from pages.functional_tests_page.onboarding_pages.onboarding_page import OnboardingPage
from utils.logger_utils import *

ADB_TAG = "wikipedia.alpha"

@pytest.fixture(scope="session", autouse=True)
def appium_service():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ Appium —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Appium —Å–µ—Ä–≤–µ—Ä–∞...")

    command = ["appium", "--log-level", "error"]

    if platform.system() != "Windows":
        process = subprocess.Popen(command, preexec_fn=os.setsid)
    else:
        process = subprocess.Popen(command, creationflags=subprocess.CREATE_NEW_PROCESS_GROUP)

    # –ü—Ä—è–º–æ –≤–Ω—É—Ç—Ä–∏ —Ñ–∏–∫—Å—Ç—É—Ä—ã: –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Appium
    start_time = time.time()
    timeout = 15
    while time.time() - start_time < timeout:
        try:
            with socket.create_connection(("127.0.0.1", 4723), timeout=2):
                print("‚úÖ Appium —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                break
        except (OSError, ConnectionRefusedError):
            time.sleep(1)
    else:
        print("‚ùå Appium —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 15 —Å–µ–∫—É–Ω–¥")
        process.terminate()
        raise RuntimeError("Appium —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")

    yield  # –ó–¥–µ—Å—å –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–µ—Å—Ç—ã

    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Appium —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        if platform.system() != "Windows":
            os.killpg(os.getpgid(process.pid), signal.SIGTERM)
        else:
            subprocess.call(['taskkill', '/F', '/T', '/PID', str(process.pid)])
        print("‚úÖ Appium —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Appium: {e}")

@pytest.fixture(scope="function")
def driver():
    d = create_driver()
    yield d
    d.quit()

@pytest.fixture(scope="function")
def onboarding(driver):
    return OnboardingPage(driver)

@pytest.fixture(scope="function")
def logger(request):
    test_name = request.node.name
    test_file_path = request.fspath

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ pytest
    project_root = str(request.config.rootdir)

    # –ü—É—Ç—å –∫ –æ–±—â–µ–π –ø–∞–ø–∫–µ logs –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    logs_root_dir = os.path.join(project_root, "logs")
    os.makedirs(logs_root_dir, exist_ok=True)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –ª–µ–∂–∏—Ç —Ç–µ—Å—Ç
    test_module_dir = os.path.basename(os.path.dirname(test_file_path))

    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤: <–∫–æ—Ä–µ–Ω—å>/logs/<module>_logs
    log_dir_name = f"{test_module_dir}_logs"
    log_dir_path = os.path.join(project_root, "logs", log_dir_name)
    os.makedirs(log_dir_path, exist_ok=True)

    return setup_logger(test_name, log_dir_path)

def run_adb_logcat(log_file):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç adb logcat –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª."""
    try:
        kwargs = {
            'stdout': open(log_file, 'w', encoding='utf-8'),
            'stderr': subprocess.STDOUT
        }
        # –î–æ–±–∞–≤–ª—è–µ–º preexec_fn —Ç–æ–ª—å–∫–æ –Ω–∞ Unix-—Å–∏—Å—Ç–µ–º–∞—Ö
        if platform.system() != "Windows":
            kwargs['preexec_fn'] = os.setsid

        process = subprocess.Popen(['adb', 'logcat', f'{ADB_TAG}:I', '*:S'],
                                   **kwargs)
        return process
    except FileNotFoundError:
        print("–û—à–∏–±–∫–∞: adb –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH.")
        return None

def stop_process(process):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å."""
    if process:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
            if platform.system() == "Windows":
                subprocess.Popen(['taskkill', '/F', '/T', '/PID', str(process.pid)])
            else:
                os.killpg(os.getpgid(process.pid), signal.SIGTERM)
            process.wait()
            print("–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        except ProcessLookupError:
            print("–ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.")

@pytest.fixture(scope="function")
def device_logs(request):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ADB –ø–µ—Ä–µ–¥ –∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞."""
    test_name = request.node.name
    test_file_path = request.fspath

    project_root = str(request.config.rootdir)

    # –ü—É—Ç—å –∫ –æ–±—â–µ–π –ø–∞–ø–∫–µ logs –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    logs_root_dir = os.path.join(project_root, "logs")
    os.makedirs(logs_root_dir, exist_ok=True)

    test_module_dir = os.path.basename(os.path.dirname(test_file_path))

    # –ü—É—Ç—å –∫ –ª–æ–≥–∞–º: <–∫–æ—Ä–µ–Ω—å>/logs/<module>_logs
    log_dir_name = f"{test_module_dir}_logs"
    log_dir_path = os.path.join(project_root, "logs", log_dir_name)
    os.makedirs(log_dir_path, exist_ok=True)

    log_file = setup_logger_device(test_name, log_dir_path)

    process = run_adb_logcat(log_file)
    if process:
        print(f"[{test_name}] –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ {log_file} –Ω–∞—á–∞–ª–æ—Å—å.")
        yield
        stop_process(process)
        print(f"[{test_name}] –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {log_file}")
    else:
        print(f"[{test_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å adb logcat.")
        yield