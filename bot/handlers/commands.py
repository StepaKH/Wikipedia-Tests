import re

import httpx
from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.types import Message

from bot.config import ADMIN_ID
from bot.keyboards.main_menu import get_main_menu
from bot.utils.report_sender import send_last_report
from bot.utils.scheduler import schedule_tests, is_schedule_active, cancel_scheduled_tests
from bot.utils.test_runner import run_tests, stop_tests, is_tests_running

ALLOWED_MARKERS = ["smoke", "negative", "onboarding", "positive", "auth", "registration", "validation", "customize_feed", "customize_random", "article", "tabs", "search", "saved"]
router = Router()

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    keyboard = get_main_menu()
    await message.answer("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "üõ† *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*\n\n"
        "üìå /start ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "üöÄ /run_tests [–∫–æ–ª-–≤–æ] [–º–∞—Ä–∫–µ—Ä] ‚Äî –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤\n"
        "üõë /stop_tests ‚Äî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç—ã\n"
        "üìÑ /last_report ‚Äî –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á—ë—Ç\n"
        "üè∑ /markers ‚Äî –°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤\n"
        "‚è∞ /schedule_tests HH:MM ‚Äî –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫\n"
        "‚ùå /cancel_schedule ‚Äî –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫\n"
        "üîÅ /simulate_push ‚Äî –ò–º–∏—Ç–∞—Ü–∏—è push –≤ GitHub\n"
        "‚ÑπÔ∏è /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    keyboard = get_main_menu()
    await message.answer(help_text, parse_mode="Markdown", reply_markup=keyboard)

def format_resource_stats(stats: dict) -> str:
    return (
        "üìä –†–µ—Å—É—Ä—Å—ã —Å–∏—Å—Ç–µ–º—ã:\n"
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['duration']} —Å–µ–∫\n"
        f"üñ• CPU: {stats['cpu']}% ({stats['cpu_diff']:+}%)\n"
        f"üß† RAM: {stats['ram']}% ({stats['ram_diff']:+}%)"
    )

@router.message(Command("run_tests"))
@router.message(Command("run_tests"))
async def handle_run_tests(message: Message):
    if is_tests_running():
        await message.answer("‚ö†Ô∏è –¢–µ—Å—Ç—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return

    args = message.text.strip().split()
    try:
        count = int(args[1]) if len(args) > 1 else 1
        if count < 1 or count > 10:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –£–∫–∞–∂–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/run_tests 2", parse_mode="Markdown")
        return

    marker = args[2] if len(args) > 2 else None
    if marker and marker not in ALLOWED_MARKERS:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Ä–∫–µ—Ä. –î–æ–ø—É—Å—Ç–∏–º—ã–µ:\n" + "\n".join(f"‚Ä¢ {m}" for m in ALLOWED_MARKERS),
            parse_mode="Markdown"
        )
        return

    msg = f"üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã –Ω–∞ *{count}* –ø–æ—Ç–æ–∫(–∞/–æ–≤)"
    if marker:
        msg += f" —Å –º–∞—Ä–∫–µ—Ä–æ–º *{marker}*"
    await message.answer(msg + "...", parse_mode="Markdown")

    result_msg, success, errors_summary, resource_stats = await run_tests(
        parallel_count=count,
        marker=marker
    )

    await message.answer(result_msg)
    await message.answer(format_resource_stats(resource_stats))

    if errors_summary:
        await message.answer("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —É–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã:\n" + errors_summary)

    await send_last_report(message)

@router.message(Command("stop_tests"))
async def cmd_stop_tests(message: types.Message):
    was_stopped = await stop_tests()
    if was_stopped:
        await message.answer("üõë –¢–µ—Å—Ç—ã –±—ã–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é.")
    else:
        await message.answer("‚ÑπÔ∏è –¢–µ—Å—Ç—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

@router.message(Command("last_report"))
async def cmd_last_report(message: types.Message):
    await send_last_report(message)

@router.message(Command("markers"))
async def cmd_markers(message: Message):
    if not ALLOWED_MARKERS:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤.")
        return

    formatted = "\n".join([f"‚Ä¢ {m}" for m in ALLOWED_MARKERS])
    await message.answer("üè∑ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã:\n" + formatted, parse_mode="Markdown")

@router.message(Command("simulate_push"))
async def simulate_push(message: Message):
    async with httpx.AsyncClient() as client:
        commit = await client.post(
            "http://localhost:8000/repos/fake_user/fake_repo/git/commits",
            json={"message": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–∏—Ç –∏–∑ Telegram"}
        )

        webhook = await client.post(
            "http://localhost:8000/api/webhook",
            headers={"X-GitHub-Event": "push"},
            json={
                "ref": "refs/heads/main",
                "commits": [commit.json()]
            }
        )

    await message.answer(
        "üîÅ –ò–º–∏—Ç–∞—Ü–∏—è GitHub flow:\n"
        f"1. –°–æ–∑–¥–∞–Ω –∫–æ–º–º–∏—Ç: {commit.json()['sha']}\n"
        f"2. –í–µ–±—Ö—É–∫ —Å—Ç–∞—Ç—É—Å: {webhook.json()['status']}\n\n"
        "–ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã..."
    )
    await handle_run_tests(message)

@router.message(Command("schedule_tests"))
async def cmd_schedule_tests(message: Message, bot: Bot):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    args = message.text.strip().split()
    if len(args) != 2 or not re.match(r"^\d{2}:\d{2}$", args[1]):
        await message.answer("‚ùå –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/schedule_tests 22:30")
        return

    hour, minute = map(int, args[1].split(":"))
    if not (0 <= hour < 24 and 0 <= minute < 60):
        await message.answer("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: /schedule_tests 08:15")
        return

    schedule_tests(bot, hour, minute)
    await message.answer(f"‚úÖ –¢–µ—Å—Ç—ã –±—É–¥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {hour:02d}:{minute:02d}")

@router.message(Command("cancel_schedule"))
async def cmd_cancel_schedule(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    if is_schedule_active():
        cancel_scheduled_tests()
        await message.answer("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –æ—Ç–∫–ª—é—á—ë–Ω.")
    else:
        await message.answer("‚ÑπÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
