from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

class SwipeActions:
    def __init__(self, driver, timeout=10, logger=None):
        self.driver = driver
        self.wait = WebDriverWait(driver, timeout)
        self.logger = logger

    def wait_for_element(self, by_locator):
        return self.wait.until(EC.visibility_of_element_located(by_locator))

    def swipe(self, direction: str, speed="normal", wait_locator=None, expected_text=None, first_screen=None):
        # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
        direction = direction.lower()

        if self.logger:
            self.logger.debug(f"üì≤ –ù–∞—á–∏–Ω–∞–µ–º —Å–≤–∞–π–ø: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ = {direction.upper()}")

        if first_screen:
            if self.logger:
                self.logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø–µ—Ä–µ–¥ —Å–≤–∞–π–ø–æ–º")
            try:
                self.wait_for_element(first_screen)
            except Exception as e:
                if self.logger:
                    self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–µ—Ä–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞")
                return False

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
        window_size = self.driver.get_window_size()
        width = window_size['width']
        height = window_size['height']

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–∞–π–ø–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if direction == 'left':
            start_x = width * 0.9 if speed == "normal" else width
            end_x = width * 0.1
            start_y = height * 0.5
            end_y = height * 0.5
        elif direction == 'right':
            start_x = width * 0.1 if speed == "normal" else 0
            end_x = width * 0.9
            start_y = height * 0.5
            end_y = height * 0.5
        elif direction == 'up':
            start_x = width * 0.5
            end_x = width * 0.5
            start_y = height * 0.9
            end_y = height * 0.1
        elif direction == 'down':
            start_x = width * 0.5
            end_x = width * 0.5
            start_y = height * 0.1
            end_y = height * 0.9
        else:
            raise ValueError(f"Unsupported swipe direction: {direction}")

        swipe_speed = 500 if speed == "normal" else 300  # 300 –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–≤–∞–π–ø–∞

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≤–∞–π–ø–∞
        self.driver.swipe(start_x, start_y, end_x, end_y, swipe_speed)

        if wait_locator:
            if self.logger:
                self.logger.info("üîç –û–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ —Å–≤–∞–π–ø–∞")
            try:
                element = self.wait_for_element(wait_locator)
                if expected_text:
                    actual = element.text.strip()
                    result = actual == expected_text
                    if self.logger:
                        if result:
                            self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç: '{actual}' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É.")
                        else:
                            self.logger.warning(f"‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: '{actual}' ‚â† '{expected_text}'")
                    return result
                return element.is_displayed()
            except Exception as e:
                if self.logger:
                    self.logger.warning(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–≤–∞–π–ø–∞: {str(e)}")
                return False

        return True

    def swipe_left(self, wait_locator=None, expected_text=None, first_screen=None, speed="normal"):
        return self.swipe("left", speed, wait_locator, expected_text, first_screen)

    def swipe_right(self, wait_locator=None, expected_text=None, first_screen=None, speed="normal"):
        return self.swipe("right", speed, wait_locator, expected_text, first_screen)

    def swipe_up(self, wait_locator=None, expected_text=None, first_screen=None, speed="normal"):
        return self.swipe("up", speed, wait_locator, expected_text, first_screen)

    def swipe_down(self, wait_locator=None, expected_text=None, first_screen=None, speed="normal"):
        return self.swipe("down", speed, wait_locator, expected_text, first_screen)