from appium.webdriver.common.appiumby import AppiumBy
from pages.functional_tests_page.base.base_page import BasePage
from selenium.webdriver.support.ui import WebDriverWait
import random

class LanguageActions(BasePage):
    def __init__(self, driver, logger=None):
        super().__init__(driver, logger=logger)
        self.logger = logger

    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    ADD_LANGUAGE_TITLE = (AppiumBy.XPATH, '//android.widget.TextView[@resource-id="org.wikipedia.alpha:id/wiki_language_title" and @text="Add language"]')
    # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
    SEARCH_FIELD = (AppiumBy.ID, "org.wikipedia.alpha:id/menu_search_language")
    # –ü–æ–ª–µ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
    INPUT_TEXT_FIELD = (AppiumBy.ID, "org.wikipedia.alpha:id/search_src_text")
    # –Ø–∑—ã–∫–∏ –≤ —Å–ø–∏—Å–∫–µ
    LANGUAGE_TITLES = (AppiumBy.XPATH, '//android.widget.TextView[@resource-id="org.wikipedia.alpha:id/localized_language_name"]')
    # –ò–∫–æ–Ω–∫–∞ –¥–ª—è drag-and-drop
    DRAG_ICONS = (AppiumBy.XPATH, '//android.widget.ImageView[@resource-id="org.wikipedia.alpha:id/wiki_language_drag_handle"]')
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    BACK_BTN = (AppiumBy.ACCESSIBILITY_ID, "Navigate up")
    # –ú–µ–Ω—é (—Ç—Ä–∏ —Ç–æ—á–∫–∏)
    MENU_BTN = (AppiumBy.ACCESSIBILITY_ID, "More options")
    # –ö–Ω–æ–ø–∫–∞ "Remove language"
    REMOVE_LANGUAGE_BTN = (AppiumBy.ID, "org.wikipedia.alpha:id/content")
    FIND_LANGUAGE_TITLE = (AppiumBy.XPATH,'//android.widget.TextView[@resource-id="org.wikipedia.alpha:id/wiki_language_title"]')
    DELETE_BUTTOM = (AppiumBy.ACCESSIBILITY_ID, "Delete selected items")
    OK_DELETE = (AppiumBy.ID, "android:id/button1")

    @staticmethod
    def language_by_name(name):
        return (
            AppiumBy.XPATH,
            f'//android.widget.TextView[@resource-id="org.wikipedia.alpha:id/wiki_language_title" and @text="{name}"]'
        )

    @staticmethod
    def language_by_name_search(name):
        return (
            AppiumBy.XPATH,
            f'//android.widget.TextView[@resource-id="org.wikipedia.alpha:id/localized_language_name" and @text="{name}"]'
        )

    def log(self, level, msg):
        if self.logger:
            getattr(self.logger, level)(msg)

    def choose_random_language(self, max_scrolls=20, click_fact=True):
        """
        –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å.
        """
        try:
            scrolls = random.randint(0, max_scrolls)
            self.log('info', f"üîÅ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑: {scrolls} —Ä–∞–∑")

            for _ in range(scrolls):
                self.swipes.swipe_up()

            self.driver.implicitly_wait(2)
            elements = self.driver.find_elements(*self.LANGUAGE_TITLES)

            if not elements:
                self.log('warning', "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —è–∑—ã–∫–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ.")
                return None

            chosen = random.choice(elements)
            language_name = chosen.text.strip()

            if not language_name:
                self.log('warning', "‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞.")
                return None

            if click_fact:
                chosen.click()

            self.log('info', f"‚úÖ –Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω: {language_name}")
            return language_name

        except Exception as e:
            self.log('error', f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞: {str(e)}")
            return None

    def add_language_via_search(self, language_name):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞"""
        try:
            self.log("debug", "–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞")
            if not self.clicks.safe_click(self.SEARCH_FIELD):
                self.log("warning", f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞")
                return False

            self.log("debug", f"–í–≤–æ–¥ '{language_name}' –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞")
            if not self.text.safe_input(self.INPUT_TEXT_FIELD, language_name):
                self.log("warning", f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ '{language_name}' –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞")
                return False

            self.log("debug", f"–í—ã–±–∏—Ä–∞–µ–º '{language_name}' –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞")
            result_locator = self.language_by_name_search(language_name)
            if not self.clicks.safe_click(result_locator):
                self.log("warning", f"‚ö†Ô∏è –Ø–∑—ã–∫ '{language_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞")
                return False

            return language_name

        except Exception as e:
            self.log("error", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞: {str(e)}")
            return False

    def get_language_names(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        """
        self.clicks.wait_for_element(self.FIND_LANGUAGE_TITLE)
        elements = self.driver.find_elements(*self.FIND_LANGUAGE_TITLE)
        names = [el.text.strip() for el in elements if el.text.strip()]
        return names

    def wait_language(self, language_name):
        wait_lang = (
            AppiumBy.XPATH,
            f'//android.widget.TextView[@resource-id="org.wikipedia.alpha:id/wiki_language_title" and @text="{language_name}"]'
        )
        self.clicks.wait_for_element(wait_lang)

    def move_language_to_bottom(self, language_name, new_language=None):
        """
        –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —è–∑—ã–∫ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ —Å–∞–º—ã–π –Ω–∏–∑ —Å–ø–∏—Å–∫–∞
        """
        try:
            self.log("debug", "–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤")
            self.wait_language(language_name)
            if new_language:
                WebDriverWait(self.driver, 5).until(
                    lambda d: self.get_language_names()[-2] != 'English'
                    and self.get_language_names()[-2] != '–†—É—Å—Å–∫–∏–π'
                )
            languages = self.get_language_names()
            if not languages:
                self.log("warning", "‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                return False

            if language_name not in languages:
                self.log("warning", f"‚ö†Ô∏è –Ø–∑—ã–∫ '{language_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")
                return False

            index_from = languages.index(language_name)
            index_to = len(languages) - 2  # –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü

            if index_from == index_to:
                self.log("info", f"‚úÖ –Ø–∑—ã–∫ '{language_name}' —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–∏–∑—É —Å–ø–∏—Å–∫–∞")
                return True

            self.log("debug", "–ü–æ–ª—É—á–∞–µ–º drag-—ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ")
            drag_elements = self.driver.find_elements(*self.DRAG_ICONS)

            if index_from >= len(drag_elements) or index_to >= len(drag_elements):
                self.log("error", "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ drag-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è")
                return False

            source = drag_elements[index_from]
            target = drag_elements[index_to]

            self.log("debug", f"üîÑ –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º '{language_name}' —Å –ø–æ–∑–∏—Ü–∏–∏ {index_from} –Ω–∞ {index_to}")
            self.driver.drag_and_drop(source, target)
            WebDriverWait(self.driver, 5).until(
                lambda d: self.get_language_names()[-2] == language_name
            )

            return True

        except Exception as e:
            self.log("error", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —è–∑—ã–∫–∞: {e}")
            return False

    def remove_random_language_by_long_press(self):
        try:
            self.log("debug", "–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤")
            languages = self.get_language_names()
            if len(languages) <= 1:
                self.log("warning", "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è–∑—ã–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return False

            language_name = random.choice(languages[:-1])
            self.log("info", f"üéØ –í—ã–±—Ä–∞–Ω —è–∑—ã–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: '{language_name}'")

            self.wait_language(language_name)
            self.log("debug", "–ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞")
            element = self.driver.find_element(*self.language_by_name(language_name))

            self.log("debug", f"–í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —è–∑—ã–∫ '{language_name}'")
            if not self.clicks.long_press(element):
                self.log("warning", "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ")
                return False
            self.log("info", f"‚úÖ –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è —è–∑—ã–∫–∞ '{language_name}'")

            self.log("debug", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞")
            if not self.clicks.safe_click(self.DELETE_BUTTOM):
                self.log("warning", "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è")
                return False
            if not self.clicks.safe_click(self.OK_DELETE):
                self.log("warning", "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ")
                return False

            self.log("info", f"üóëÔ∏è –Ø–∑—ã–∫ '{language_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")

            return language_name

        except Exception as e:
            self.log("error", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ long press: {e}")
            return False

    def remove_random_language_via_menu(self):
        try:
            self.log("debug", "–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤")
            languages = self.get_language_names()
            if len(languages) <= 1:
                self.log("warning", "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è–∑—ã–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return False

            language_name = random.choice(languages[:-1])
            self.log("info", f"üéØ –í—ã–±—Ä–∞–Ω —è–∑—ã–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω—é: '{language_name}'")

            self.log("debug", "–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é (—Ç—Ä–∏ —Ç–æ—á–∫–∏)")
            if not self.clicks.safe_click(self.MENU_BTN):
                self.log("warning", "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é")
                return False

            self.log("debug", "–ù–∞–∂–∏–º–∞–µ–º 'Remove language'")
            if not self.clicks.safe_click(self.REMOVE_LANGUAGE_BTN):
                self.log("warning", "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å 'Remove language'")
                return False

            self.log("debug", f"–í—ã–±–∏—Ä–∞–µ–º —è–∑—ã–∫ '{language_name}' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            checkbox_locator = self.language_by_name(language_name)
            if not self.clicks.safe_click(checkbox_locator):
                self.log("warning", f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ '{language_name}'")
                return False

            self.log("debug", "–ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è")
            if not self.clicks.safe_click(self.DELETE_BUTTOM):
                self.log("warning", "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è")
                return False

            self.log("debug", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ")
            if not self.clicks.safe_click(self.OK_DELETE):
                self.log("warning", "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ")
                return False

            self.log("info", f"üóëÔ∏è –Ø–∑—ã–∫ '{language_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω —á–µ—Ä–µ–∑ –º–µ–Ω—é")

            return language_name

        except Exception as e:
            self.log("error", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é: {e}")
            return False